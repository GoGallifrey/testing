import pandas as pd
import argparse
from openai import OpenAI  # или аналог для других LLM

class FreelancerAnalyzer:
    def __init__(self, data_path):
        self.data = pd.read_csv(data_path)
        self.preprocess_data()
        self.llm_client = OpenAI(api_key="your-api-key")  # конфигурация LLM
    
    def preprocess_data(self):
        """Предварительная обработка данных"""
        # Очистка, преобразование типов и т.д.
        pass
    
    def generate_stats_query(self, question):
        """Генерация запроса к данным на основе вопроса"""
        prompt = f"""
        На основе вопроса: "{question}" 
        и структуры данных: {self.data.columns.tolist()}
        сгенерируй pandas-код для ответа на вопрос.
        Верни только код без пояснений.
        """
        
        response = self.llm_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0
        )
        return response.choices[0].message.content
    
    def answer_question(self, question):
        """Ответ на вопрос пользователя"""
        try:
            # Генерация и выполнение кода для анализа
            code = self.generate_stats_query(question)
            local_vars = {"df": self.data}
            exec(code, {}, local_vars)
            result = local_vars.get('result', 'Не удалось получить ответ')
            
            # Формирование понятного ответа
            answer_prompt = f"""
            Вопрос: {question}
            Результат анализа: {result}
            Сформулируй четкий ответ на вопрос.
            """
            
            answer = self.llm_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": answer_prompt}],
                temperature=0
            )
            return answer.choices[0].message.content
        except Exception as e:
            return f"Ошибка при обработке запроса: {str(e)}"

def main():
    parser = argparse.ArgumentParser(description="Анализатор доходов фрилансеров")
    parser.add_argument("question", type=str, help="Вопрос для анализа данных")
    parser.add_argument("--data", type=str, default="freelancer_data.csv", 
                       help="C:\Users\dlode\Documents\GitHub\Тестовое 3.9")
    
    args = parser.parse_args()
    
    analyzer = FreelancerAnalyzer(args.data)
    answer = analyzer.answer_question(args.question)
    print("\nОтвет:", answer)

if __name__ == "__main__":
    main()