import pandas as pd
import argparse
import os
from openai import OpenAI
from typing import Optional, Dict, Any
import logging

# Настройка логгирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FreelancerAnalyzer:
    def __init__(self, data_path: str):
        """Инициализация анализатора с загрузкой и предобработкой данных."""
        try:
            self.data = self._load_data(data_path)
            self.preprocess_data()
            self.llm_client = self._init_llm_client()
        except Exception as e:
            logger.error(f"Ошибка инициализации: {str(e)}")
            raise

    def _load_data(self, data_path: str) -> pd.DataFrame:
        """Безопасная загрузка данных с проверкой файла."""
        if not os.path.exists(data_path):
            raise FileNotFoundError(f"Файл данных не найден: {data_path}")
        return pd.read_csv(data_path)

    def _init_llm_client(self) -> OpenAI:
        """Инициализация клиента LLM с проверкой API ключа."""
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY не установлен в переменных окружения")
        return OpenAI(api_key=api_key)

    def preprocess_data(self) -> None:
        """Базовая предварительная обработка данных."""
        # Удаление дубликатов
        self.data.drop_duplicates(inplace=True)
        
        # Преобразование типов, если необходимо
        if 'date' in self.data.columns:
            self.data['date'] = pd.to_datetime(self.data['date'], errors='coerce')
        
        # Заполнение пропущенных значений
        numeric_cols = self.data.select_dtypes(include='number').columns
        self.data[numeric_cols] = self.data[numeric_cols].fillna(0)

    def _validate_code(self, code: str) -> bool:
        """Базовая проверка безопасности генерируемого кода."""
        forbidden_keywords = {'os', 'sys', 'subprocess', 'open', 'exec', 'eval', 'import'}
        code_lower = code.lower()
        return not any(keyword in code_lower for keyword in forbidden_keywords)

    def generate_stats_query(self, question: str) -> str:
        """Генерация безопасного pandas-кода для ответа на вопрос."""
        prompt = f"""
        На основе вопроса: "{question}" 
        и структуры данных: {self.data.columns.tolist()}
        сгенерируй pandas-код для ответа на вопрос.
        Используй только эти переменные: df (DataFrame), result (для результата).
        Верни только код без пояснений.
        """
        
        try:
            response = self.llm_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0
            )
            code = response.choices[0].message.content
            
            if not self._validate_code(code):
                raise ValueError("Сгенерированный код содержит потенциально опасные операции")
                
            return code
        except Exception as e:
            logger.error(f"Ошибка генерации кода: {str(e)}")
            raise

    def answer_question(self, question: str) -> str:
        """Ответ на вопрос пользователя с обработкой ошибок."""
        try:
            logger.info(f"Обработка вопроса: {question}")
            
            # Генерация и выполнение кода
            code = self.generate_stats_query(question)
            local_vars: Dict[str, Any] = {"df": self.data, "result": None}
            
            # Безопасное выполнение кода
            exec_globals = {
                'pd': pd,
                '__builtins__': {
                    'print': print,
                    'str': str,
                    'int': int,
                    'float': float,
                    'bool': bool,
                    'list': list,
                    'dict': dict
                }
            }
            
            exec(code, exec_globals, local_vars)
            result = local_vars.get('result', 'Не удалось получить ответ')

            # Формирование понятного ответа
            answer_prompt = f"""
            Вопрос: {question}
            Результат анализа: {result}
            Сформулируй четкий, профессиональный ответ на вопрос.
            Если в данных есть ограничения, укажи их.
            """
            
            answer = self.llm_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": answer_prompt}],
                temperature=0.3  # Немного креативности в ответах
            )
            return answer.choices[0].message.content
            
        except Exception as e:
            error_msg = f"Ошибка при обработке запроса: {str(e)}"
            logger.error(error_msg)
            return error_msg

def interactive_mode(analyzer: FreelancerAnalyzer) -> None:
    """Интерактивный режим для вопросов."""
    print("\nИнтерактивный режим анализатора. Введите 'выход' для завершения.")
    while True:
        question = input("\nВаш вопрос о данных фрилансеров: ")
        if question.lower() in ('выход', 'exit', 'quit'):
            break
        if question.strip():
            answer = analyzer.answer_question(question)
            print("\nОтвет:", answer)
        else:
            print("Пожалуйста, введите вопрос.")

def main():
    parser = argparse.ArgumentParser(description="Анализатор доходов фрилансеров")
    parser.add_argument(
        "--question", 
        type=str, 
        help="Вопрос для анализа данных",
        required=False
    )
    parser.add_argument(
        "--data", 
        type=str, 
        default="freelancer_data.csv",
        help="Путь к файлу с данными фрилансеров"
    )
    parser.add_argument(
        "--interactive",
        action="store_true",
        help="Запуск в интерактивном режиме"
    )
    
    args = parser.parse_args()
    
    try:
        analyzer = FreelancerAnalyzer(args.data)
        
        if args.interactive or not args.question:
            interactive_mode(analyzer)
        else:
            answer = analyzer.answer_question(args.question)
            print("\nОтвет:", answer)
            
    except Exception as e:
        logger.error(f"Критическая ошибка: {str(e)}")
        print(f"Произошла ошибка: {str(e)}")

if __name__ == "__main__":
    main()
